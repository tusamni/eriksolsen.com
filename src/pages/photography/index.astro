---
// layout
import SimpleLayout from "@/layouts/SimpleLayout";

// components
import Shoot from "@/components/card/Shoot";

const unsortedShoots = await Astro.glob("./*.mdx");
const shoots = unsortedShoots.sort(function (a, b) {
    return new Date(b.frontmatter.date).valueOf() - new Date(a.frontmatter.date).valueOf();
});

// make a unique list of the categories
const allCategories = [];
unsortedShoots.map((s) => allCategories.push(s.frontmatter.category));
const uniqueCategories = [...new Set(allCategories)];

// make a unique list of the brands
const allBrands = [];
unsortedShoots.map((s) => {
    if (s.frontmatter.brand) {
        allBrands.push(s.frontmatter.brand);
    }
});
const uniqueBrands = [...new Set(allBrands)];
---

<SimpleLayout
    title="Car Photography in Austin, TX"
    description="During the summer months you'll catch me shootin photos at Cars and Coffee at COTA or Coffee With Cars in Dripping Springs. I also do freelance photography for Bring a Trailer auctions."
>
    <h1 slot="heading">I shoot professional car photography in Austin.</h1>
    <p slot="intro" class="mt-6 text-base text-zinc-600 dark:text-zinc-400">
        With online car auctions rising in popularity, I've helped clients put their best foot forward with beautiful car photography. Whether it's <i
            >Bring a Trailer</i
        >, <i>Cars & Bids</i>, <i>Hagerty</i> or <i>eBay</i>, I can help get top dollar for your vehicle auction.
    </p>

    <div class="grid grid-cols-1 gap-16 lg:grid-cols-4 lg:grid-rows-[auto_1fr] lg:gap-12">
        <div class="space-y-4">
            <div>
                <div class="text-base font-semibold text-zinc-900 dark:text-zinc-100">Search</div>
                <div class="relative">
                    <input
                        name="search"
                        id="searchInput"
                        type="text"
                        class="w-full border border-zinc-100 text-xs focus:border-rose-400 focus:ring-rose-400 dark:border-zinc-700/40"
                    />

                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke-width="1"
                        stroke="currentColor"
                        id="clearSearch"
                        class="absolute top-1/2 right-3 hidden h-5 w-5 -translate-y-1/2 transform text-zinc-300"
                    >
                        <path stroke-linecap="round" stroke-linejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                        ></path>
                    </svg>
                </div>
            </div>

            <div>
                <div class="text-base font-semibold text-zinc-900 dark:text-zinc-100">Filters</div>
                <form class="mt-4 space-y-4 text-sm">
                    <fieldset class="border border-zinc-100 py-2 px-4 text-xs dark:border-zinc-700/40">
                        <legend class="italic">Shoot Type</legend>
                        <div class="space-y-1">
                            {
                                uniqueCategories.map((c) => (
                                    <label class="flex items-center gap-1">
                                        <input
                                            type="checkbox"
                                            data-type="category"
                                            value={c}
                                            class="h-4 w-4 rounded border-zinc-200 bg-zinc-100 text-rose-400 focus:ring-0"
                                            checked
                                        />
                                        {c}
                                    </label>
                                ))
                            }
                        </div>
                    </fieldset>

                    <!-- <fieldset class="border border-zinc-100 py-2 px-4 text-xs dark:border-zinc-700/40">
                        <legend class="italic">Vehicle Brand</legend>
                        <div class="space-y-1">
                            {
                                uniqueBrands.map((b) => (
                                    <label class="flex items-center gap-1">
                                        <input
                                            type="checkbox"
                                            value={b}
                                            class="h-4 w-4 rounded border-zinc-200 bg-zinc-100 text-rose-400 focus:ring-0"
                                        />
                                        {b}
                                    </label>
                                ))
                            }
                        </div>
                    </fieldset> -->

                    <select
                        name="sort"
                        id="sort"
                        class="w-full border border-zinc-100 text-xs focus:border-rose-400 focus:ring-rose-400 dark:border-zinc-700/40"
                    >
                        <option value="new">Date (newest)</option>
                        <option value="old">Date (oldest)</option>
                    </select>
                </form>
            </div>
        </div>

        <div id="shootList" class="col-span-3 grid grid-cols-3 gap-y-12 gap-x-8">
            {shoots.map((s) => <Shoot shoot={s} />)}
        </div>
    </div>
</SimpleLayout>

<script>
    const category_doms = document.querySelectorAll('[data-type="category"]'); // list of categories
    const brand_doms = document.getElementsByName("brand"); // list of brands
    const search_dom = document.getElementById("searchInput"); // search field
    const search_clear = document.getElementById("clearSearch");
    const sort_dom = document.getElementById("sort"); // sorting field
    const shoots_dom = document.querySelectorAll("[data-date]"); // all shoots

    // search trigger
    search_dom.addEventListener("keyup", handleSearch); // run the search filters
    search_clear.addEventListener("click", clearSearch); // clear the search box

    // sort trigger
    sort_dom.addEventListener("click", handleSort); // sorting

    // filter trigger
    category_doms.forEach((category) => {
        category.addEventListener("click", handleFilter);
    });

    function handleSearch() {
        const keyword = document.getElementById("searchInput").value; // search value

        // filter by search term
        [...shoots_dom].forEach((shoot) => {
            if (shoot.dataset.title.includes(keyword)) {
                shoot.classList.remove("hidden");
            } else {
                shoot.classList.add("hidden");
            }
        });

        // show clear icon
        if (search_dom.value.length > 0) {
            search_clear.classList.remove("hidden");
        } else {
            search_clear.classList.add("hidden");
        }
    }

    function clearSearch() {
        // empty search input
        search_dom.value = "";

        // rerun the search function
        handleSearch();
    }

    function handleSort() {
        var shootsArray = Array.from(shoots_dom);
        let sorted = [];

        // sorting by date
        if (sort_dom.value === "new") {
            sorted = shootsArray.sort(function (a, b) {
                if (a.dataset.date > b.dataset.date) return -1;
            });
            sorted.forEach((e) => document.querySelector("#shootList").appendChild(e));
        } else {
            sorted = shootsArray.sort(function (a, b) {
                if (a.dataset.date < b.dataset.date) return -1;
            });
            sorted.forEach((e) => document.querySelector("#shootList").appendChild(e));
        }
    }

    function handleFilter() {
        // check which categories are checked off
        const category_checked_list = [];
        let all_category_unchecked = true;

        category_doms.forEach((category) => {
            if (category.checked) {
                all_category_unchecked = false;
                category_checked_list.push(category.value);
            }
        });

        [...shoots_dom].forEach((shoot) => {
            if (category_checked_list.includes(shoot.dataset.category)) {
                shoot.classList.remove("hidden");
            } else {
                shoot.classList.add("hidden");
            }
        });

        // if (!all_category_unchecked) {
        //     shoots = shoots.filter((item) => {
        //         for (let j = 0; j < category_checked_list.length; j++) {
        //             if (category_checked_list[j] && item.frontmatter.category === category_doms[j].value) {
        //                 return true;
        //             }
        //         }
        //     });
        // }

        // const brand_checked_list = [];
        // let all_brand_unchecked = true;
        // for (let i = 0; i < brand_doms.length; i++) {
        //     let checked = brand_doms[i].checked;
        //     if (checked) all_brand_unchecked = false;
        //     brand_checked_list.push(checked);
        // }

        // if (!all_brand_unchecked) {
        //     shoots = shoots.filter((item) => {
        //         for (let j = 0; j < brand_checked_list.length; j++) {
        //             if (brand_checked_list[j] && item.frontmatter.brand === brand_doms[j].value) {
        //                 return true;
        //             }
        //         }
        //     });
        // }
    }
</script>
