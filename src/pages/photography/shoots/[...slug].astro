---
// layouts
import Layout from "@/layouts/BaseLayout";

// components
import { cosmic } from "@/library/cosmic";
import { getCollection } from "astro:content";
import { formatDate } from "@/functions/DateTime";
import { Markdown } from "astro-remote";
import Container from "@/components/content/Container";
import Figure from "@/components/image/Image";
import Heading from "@/components/content/Heading";
import Related from "@/components/shoots/related/Primary";
import Section from "@/components/content/Section";
import SidebarHeading from "@/components/shoots/SidebarHeading";
import Video from "@/components/Video";

// content
export async function getStaticPaths() {
	const shoots = await getCollection("shoot");

	return shoots.map((shoot) => ({
		params: { slug: shoot.data.slug },
		props: { shoot },
	}));
}
const { shoot } = Astro.props;

// loop through the photos and get all lenses used
const allLenses = [];
const allCameras = [];

for (let image of shoot.data.images.gallery) {
	allLenses.push(image.metadata.lens);
	allCameras.push(`${image.metadata.camera_make} ${image.metadata.camera_model}`);
}
// return only the unique lenses
const uniqueLenses = [...new Set(allLenses)];
const uniqueCameras = [...new Set(allCameras)];

const { object: related } = await cosmic.objects.findOne({ type: "shoots", id: shoot.data.cosmic }).props("id, metadata.related").depth(1);
---

<Layout title={shoot.data.title} description={shoot.data.excerpt}>
	<Container classes="@container">
		<Heading>
			<h1 slot="heading">{shoot.data.title}</h1>
			<div slot="description" set:html={shoot.data.excerpt} />
		</Heading>
	</Container>

	<Section>
		<Container size="xlarge">
			<div class="grid md:grid-cols-3 gap-4 md:gap-6 lg:gap-8 items-start">
				<div class="md:col-span-3 lg:col-span-2 space-y-16">
					<div class:list={["@container grid grid-cols-2 gap-4 md:gap-6 lg:gap-8", shoot.data.images.gallery.length < 7 ? "lg:grid-cols-2" : "lg:grid-cols-3"]}>
						{
							shoot.data.images.gallery.map((g, i) => (
								<Figure
									src={g.url}
									figureClass={["w-full h-full shadow-2xl", shoot.data.images.gallery.length > 7 ? "md:h-[14em] lg:@4xl:h-[20em]" : "lg:h-[16em]"]}
									class="w-full h-full object-cover"
									sizes="(min-width: 1024px) 500px, 50vw"
									showTitle={false}
									lazy={i < 2 ? false : true}
								/>
							))
						}
					</div>
				</div>

				<div class:list={["md:col-span-3 lg:col-span-1 pt-4"]}>
					<div class="space-y-12">
						{
							shoot.data.shoot.content && (
								<div class="space-y-3">
									<SidebarHeading>Details</SidebarHeading>
									<div class="space-y-4 font-normal !leading-7 tracking-normal text-slate-700 text-base">
										<Markdown content={shoot.data.shoot.content} />
									</div>
								</div>
							)
						}

						<div class="space-y-3">
							<SidebarHeading>Meta</SidebarHeading>
							<div class="space-y-4 font-normal !leading-7 tracking-normal text-slate-700 text-sm">
								This {shoot.data.shoot.brand} photoshoot took place on {formatDate(shoot.data.date)} in {shoot.data.shoot.location}.

								{
									shoot.data.auction.url && (
										<span>
											Eventually, this {shoot.data.shoot.brand} was listed on
											<a href={shoot.data.auction.url} target="_blank" class="underline font-medium">
												{shoot.data.auction.site.value}
												<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="size-4 inline">
													<path d="M6.22 8.72a.75.75 0 0 0 1.06 1.06l5.22-5.22v1.69a.75.75 0 0 0 1.5 0v-3.5a.75.75 0 0 0-.75-.75h-3.5a.75.75 0 0 0 0 1.5h1.69L6.22 8.72Z" />
													<path d="M3.5 6.75c0-.69.56-1.25 1.25-1.25H7A.75.75 0 0 0 7 4H4.75A2.75 2.75 0 0 0 2 6.75v4.5A2.75 2.75 0 0 0 4.75 14h4.5A2.75 2.75 0 0 0 12 11.25V9a.75.75 0 0 0-1.5 0v2.25c0 .69-.56 1.25-1.25 1.25h-4.5c-.69 0-1.25-.56-1.25-1.25v-4.5Z" />
												</svg>
											</a>
											and was {shoot.data.auction.sold ? "sold for" : "bid to"} ${Intl.NumberFormat().format(shoot.data.auction.price)}.
										</span>
									)
								}

								Gear used was a {uniqueCameras} camera and {
									uniqueLenses.map((lens, i) => {
										if (uniqueLenses.length > 1 && i === uniqueLenses.length - 1) {
											return ` & ${lens}`;
										} else if (i === uniqueLenses.length - 2) {
											return `${lens}`;
										} else if (uniqueLenses.length === 1) {
											return `a ${lens}`;
										} else {
											return `${lens}, `;
										}
									})
								}
								{uniqueLenses.length === 1 ? `lens.` : `lenses.`}
							</div>
						</div>

						{
							shoot.data.videos.length > 0 && (
								<div class="space-y-3">
									<SidebarHeading>Videos</SidebarHeading>

									{shoot.data.videos.map((r) => (
										<Video video={r.video.imgix_url} title={r.title} playButton={true} />
									))}
								</div>
							)
						}

						{
							related.metadata.related.length > 0 && (
								<div class="space-y-3">
									<SidebarHeading>Related Shoots</SidebarHeading>
									<div class="space-y-4">
										{related.metadata.related.map((r) => (
											<Related shoot={r} />
										))}
									</div>
								</div>
							)
						}
					</div>
				</div>
			</div>
		</Container>
	</Section>
</Layout>
