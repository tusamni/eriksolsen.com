---
// layout
import Layout from "@/layouts/BaseLayout";

// components
import { type CollectionEntry, getCollection, getEntry } from "astro:content";
import Checkbox from "@/components/form/Checkbox";
import Container from "@/components/content/Container";
import Primary from "@/components/shoots/cards/Primary";
import Featured from "@/components/shoots/cards/Featured";
import Section from "@/components/content/Section";
import Split from "@/components/content/Split";

// content
const shoots = await getCollection("shoots");
const featured = await getEntry("shoots", "2022/08/2014-lamborghini-aventador-lp700-4");

// selects
const categories = shoots.map((s) => s.data.category);
const uniqueCategories = [...new Set(categories)].sort();
const brands = shoots.map((s) => s.data.brand);
const uniqueBrands = [...new Set(brands)].sort().filter(function (e) {
    return e;
});

// url params
const categoryParams = Astro.url.searchParams.getAll("categories[]");
const brandParams = Astro.url.searchParams.getAll("brands[]");
const search = Astro.url.searchParams.get("search");

// search
const searchRegex = search && new RegExp(search, "i");

// filter and search shoots
function shootsFilter(shoot: CollectionEntry<"shoots">) {
    // if at least one category filter is applied, hide integrations that don't match
    if (categoryParams && categoryParams.length > 0) {
        if (!categoryParams.includes(shoot.data.category.toLowerCase())) {
            return false;
        }
    }

    if (brandParams && brandParams.length > 0) {
        if (!shoot.data.brand) {
            return false;
        }
        if (!brandParams.includes(shoot.data.brand.toLowerCase())) {
            return false;
        }
    }

    // if a search term was used, filter down checking name/title/description
    if (searchRegex) {
        return searchRegex.test(shoot.data.title);
    }

    return true;
}

// get integrations, filtered by the applied search & filter, then sort the matches
const filteredShoots = (await getCollection("shoots", shootsFilter)).sort((a, b) => b.data.date.getTime() - a.data.date.getTime());
---

<Layout>
    <Section>
        <Container size="large">
            <Split size="small" float={true}>
                <div slot="heading">
                    <form class="flex flex-col gap-12 skip" method="get">
                        <div class="relative rounded-md">
                            <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="h-4 w-4 text-gray-400">
                                    <path fill-rule="evenodd" d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z" clip-rule="evenodd"></path>
                                </svg>
                            </div>
                            <input type="text" name="search" id="search" class="!pl-9" placeholder="Search" value={search} />
                        </div>

                        <div class="space-y-6">
                            <div class="flex justify-between items-center">
                                <div class="text-xl font-semibold">Filters</div>
                                <a href="/photography/shoots" class="text-sm underline">Reset</a>
                            </div>

                            <details class="group space-y-4" open={categoryParams.length > 0}>
                                <summary class="accordion code flex cursor-pointer list-none items-center justify-between text-astro-gray-200">
                                    <span class="text-lg">Categories</span>
                                    <svg width="22" height="13" viewBox="0 0 22 13" fill="none" xmlns="http://www.w3.org/2000/svg" class="chevron h-3 w-3 rotate-0 transition-transform duration-300 ease-in-out group-open:-rotate-180"
                                        ><path d="M1 1L11 11L21 1" stroke="currentColor" stroke-width="2"></path></svg
                                    >
                                </summary>
                                <div>
                                    <fieldset class="flex flex-col items-start gap-2">
                                        {uniqueCategories.map((c) => <Checkbox id={c} name="categories" checked={categoryParams.includes(c.toLowerCase())} />)}
                                    </fieldset>
                                </div>
                            </details>

                            <details class="group" open={brandParams.length > 0}>
                                <summary class="flex cursor-pointer items-center justify-between">
                                    <span class="text-lg">Brands</span>
                                    <svg width="22" height="13" viewBox="0 0 22 13" fill="none" xmlns="http://www.w3.org/2000/svg" class="chevron h-3 w-3 rotate-0 transition-transform duration-300 ease-in-out group-open:-rotate-180">
                                        <path d="M1 1L11 11L21 1" stroke="currentColor" stroke-width="2"></path>
                                    </svg>
                                </summary>
                                <div class="pt-4">
                                    <fieldset class="flex flex-col items-start gap-2">
                                        {uniqueBrands.map((b) => <Checkbox id={b} name="brands" checked={brandParams.includes(b.toLowerCase())} />)}
                                    </fieldset>
                                </div>
                            </details>

                            <button class="button button-primary">Filter</button>
                        </div>
                    </form>
                </div>

                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-10 gap-y-16">
                    {
                        (!Astro.url.search || Astro.url.search === "?search=") && (
                            <div class="col-span-1 sm:col-span-2 lg:col-span-3">
                                <Featured shoot={featured} sizes="(min-width: 768px) 66vw, (min-width: 1400px) 1000px" loading="eager" />
                            </div>
                        )
                    }

                    {filteredShoots.map((s) => <Primary shoot={s} sizes="(max-width: 640px) 100vw, 350px" loading="lazy" />)}
                </div>
            </Split>
        </Container>
    </Section>
</Layout>
