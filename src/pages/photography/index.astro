---
// layout
import SimpleLayout from "@/layouts/SimpleLayout";

// functions
import { getImage } from "@/functions/Media";
import { getPicture } from '@astrojs/image/dist/index.js';

// components
import Shoot from "@/components/card/Shoot";

const formats = import.meta.env.MODE === "development" ? ["jpeg"] : ["webp", "jpeg"];
const widths = import.meta.env.MODE === "development" ? [800] : [400, 800, 1400, 2000];
let unsortedShoots = await Astro.glob("./*.mdx");

const shoots = unsortedShoots.sort(function (a, b) {
    return new Date(b.frontmatter.date).valueOf() - new Date(a.frontmatter.date).valueOf();
});

// make a unique list of the categories
const allCategories = [];
unsortedShoots.map((s) => allCategories.push(s.frontmatter.category));
const uniqueCategories = [...new Set(allCategories)];

// make a unique list of the brands
const allBrands = [];
const formattedShoots = await Promise.all(unsortedShoots.map(async (s) => {
    if (s.frontmatter.brand) {
        allBrands.push(s.frontmatter.brand)
    }

    try {
        const remoteSrc = await getImage(s.frontmatter.featured);
        const { image, sources } = await getPicture({
            src: remoteSrc.src,
            widths,
            formats,
            aspectRatio: remoteSrc.aspectRatio,
        });

        return ({
            ...s,
            photo: {
                image,
                sources,
            }
        })
    } catch(e) {
        console.error(e)
    }    
}));

const uniqueBrands = [...new Set(allBrands)];
const filteredBrands = uniqueBrands.filter(Boolean);
---

<script>
    import { formatDate } from "@/functions/DateTime";

    const formats = import.meta.env.MODE === "development" ? ["jpeg"] : ["webp", "jpeg"];
    const widths = import.meta.env.MODE === "development" ? [800] : [400, 800, 1400, 2000];

    const dataElem = document.getElementById('data');
    let data = JSON.parse(dataElem.value);

    const category_doms = document.getElementsByName("category");
    const brand_doms = document.getElementsByName("brand");
    const search_dom = document.getElementsByName("search")[0];
    const newest_dom = document.getElementById("newest");
    
    // link doms and filter handler
    search_dom.addEventListener("keyup", handleFilter);
    
    for(let i = 0; i < category_doms.length; i++)
        category_doms[i].addEventListener("click", handleFilter);

    for(let i = 0; i < brand_doms.length; i++)
        brand_doms[i].addEventListener("click", handleFilter);

    newest_dom.addEventListener("change", handleFilter);

    // filter handler
    function handleFilter() {
        const keyword = document.getElementById("searchInput").value;

        const category_checked_list = [];
        let all_category_unchecked = true;
        for(let i = 0; i < category_doms.length; i++)
        {  
            let checked = category_doms[i].checked;
            if (checked) all_category_unchecked = false;
            category_checked_list.push(checked);
        }   

        const brand_checked_list = [];
        let all_brand_unchecked = true;
        for(let i = 0; i < brand_doms.length; i++)
        {  
            let checked = brand_doms[i].checked;
            if(checked) all_brand_unchecked = false;
            brand_checked_list.push(checked);
        }

        // start filter
        let shoots = data;
        if (keyword.length) {
            shoots = shoots.filter(item => item.frontmatter.title.includes(keyword));
        }

        if (!all_category_unchecked) {
            shoots = shoots.filter((item) => {
                for (let j = 0; j < category_checked_list.length; j++)
                {
                    if (category_checked_list[j] && item.frontmatter.category === category_doms[j].value) {
                        return true;
                    }
                }
            });
        }

        if (!all_brand_unchecked) {
            shoots = shoots.filter((item) => {
                for (let j = 0; j < brand_checked_list.length; j++)
                {
                    if (brand_checked_list[j] && item.frontmatter.brand === brand_doms[j].value) {
                        return true;
                    }
                }
            });
        }

       
        if(newest_dom.value === "date-new")
        {
            shoots = shoots.sort(function (a, b) {
                return new Date(b.frontmatter.date).valueOf() - new Date(a.frontmatter.date).valueOf();
            });
        }    
        else
        {
            shoots = shoots.sort(function (a, b) {
                return new Date(a.frontmatter.date).valueOf() - new Date(b.frontmatter.date).valueOf();
            });
        }

        let htmlEl = '';

        shoots.forEach(async (shoot) => {
            let imgSources = '';
            shoot.photo.sources.forEach((source) => {
                imgSources += `<source type="${source.type}" srcset="${source.srcset}" sizes="(min-width: 640px) 500px, 100vw">`
            });

            htmlEl += `
                <a href="${shoot.url}" class="group space-y-2" data-category="${shoot.frontmatter.category}"">
                    
                    <figure class="z-10 rounded-xl border-b-4 border-r-4 border-zinc-200 sm:rounded-2xl dark:border-zinc-600 bg-zinc-200 overflow-hidden">
                        <picture>
                            ${imgSources}
                            <img src="${shoot.photo.image.src}" loading="lazy" decoding="async" class="aspect-square object-cover group-hover:scale-105 duration-300 rounded-xl sm:rounded-2xl">
                        </picture>                        
                    </figure>

                    <div>
                        <div class="flex justify-between">
                            <time datetime="${formatDate(shoot.frontmatter.date)}" class="text-xs text-zinc-400 dark:text-zinc-500">
                                ${formatDate(shoot.frontmatter.date, { day: "numeric", month: "long", year: "numeric" })}
                            </time>

                            <div class="text-xs text-zinc-400 dark:text-zinc-500">${shoot.frontmatter.category}</div>
                        </div>
                        <h2
                            class="text-base font-semibold tracking-tight text-zinc-800 underline decoration-transparent duration-300 group-hover:decoration-zinc-800 dark:text-zinc-100"
                        >
                            ${shoot.frontmatter.title}
                        </h2>
                    </div>
                </a>
            `
        })

        document.getElementById('shoots-container').innerHTML = htmlEl;
    }
    
</script>

<SimpleLayout
    title="Car Photography in Austin, TX"
    description="During the summer months you'll catch me shootin photos at Cars and Coffee at COTA or Coffee With Cars in Dripping Springs. I also do freelance photography for Bring a Trailer auctions."
>
    <input type="hidden" id="data" value={JSON.stringify(formattedShoots)} />
    <h1 slot="heading">I shoot professional car photography in Austin.</h1>
    <p slot="intro" class="mt-6 text-base text-zinc-600 dark:text-zinc-400">
        With online car auctions rising in popularity, I've helped clients put their best foot forward with beautiful car photography. Whether it's <i
            >Bring a Trailer</i
        >, <i>Cars & Bids</i>, <i>Hagerty</i> or <i>eBay</i>, I can help get top dollar for your vehicle auction.
    </p>

    <div class="grid grid-cols-1 gap-16 lg:grid-cols-4 lg:grid-rows-[auto_1fr] lg:gap-12">
        <div class="space-y-4">
            <div>
                <div class="text-base font-semibold text-zinc-900 dark:text-zinc-100">Search</div>
                <input
                    name="search"
                    id="searchInput"
                    type="text"
                    class="w-full border border-zinc-100 text-xs focus:border-rose-400 focus:ring-rose-400 dark:border-zinc-700/40"
                />
            </div>

            <div>
                <div class="text-base font-semibold text-zinc-900 dark:text-zinc-100">Filters</div>
                <form class="mt-4 space-y-4 text-sm">
                    <fieldset class="border border-zinc-100 py-2 px-4 text-xs dark:border-zinc-700/40">
                        <legend class="italic">Shoot Type</legend>
                        <div class="space-y-1">
                            {
                                uniqueCategories.map((c) => (
                                    <label class="flex items-center gap-1">
                                        <input
                                            type="checkbox"
                                            data-attribute="category"
                                            name="category"
                                            value={c}
                                            data-group="categories"
                                            class="h-4 w-4 rounded border-zinc-200 bg-zinc-100 text-rose-400 focus:ring-0"
                                        />
                                        {c}
                                    </label>
                                ))
                            }
                        </div>
                    </fieldset>

                    <fieldset class="border border-zinc-100 py-2 px-4 text-xs dark:border-zinc-700/40">
                        <legend class="italic">Vehicle Brand</legend>
                        <div class="space-y-1">
                            {
                                filteredBrands.map((b) => (
                                    <label class="flex items-center gap-1">
                                        <input
                                            type="checkbox"
                                            name="brand"
                                            value={b}
                                            class="h-4 w-4 rounded border-zinc-200 bg-zinc-100 text-rose-400 focus:ring-0"
                                        />
                                        {b}
                                    </label>
                                ))
                            }
                        </div>
                    </fieldset>

                    <select
                        name="newest"
                        id="newest"
                        class="w-full border border-zinc-100 text-xs focus:border-rose-400 focus:ring-rose-400 dark:border-zinc-700/40"
                    >
                        <option value="date-new">Date (newest)</option>
                        <option value="date-old">Date (oldest)</option>
                    </select>
                </form>
            </div>
        </div>

        <div class="col-span-3 grid grid-cols-3 gap-y-12 gap-x-8" id="shoots-container">
            {shoots.map((s) => <Shoot shoot={s} />)}
        </div>
    </div>
</SimpleLayout>
