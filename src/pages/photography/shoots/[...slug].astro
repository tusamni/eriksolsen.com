---
// layouts
import Layout from "@/layouts/BaseLayout";

// components
import { getCollection } from "astro:content";
import { formatDate } from "@/functions/DateTime";
import { Markdown } from "astro-remote";
import Container from "@/components/content/Container";
import Figure from "@/components/image/Image";

// content
export async function getStaticPaths() {
	const shoots = await getCollection("shoot");

	return shoots.map((shoot) => ({
		params: { slug: shoot.data.slug },
		props: { shoot },
	}));
}
const { shoot } = Astro.props;

// loop through the photos and get all lenses used
// const allLenses = [];
// for (let image of shoot.data.images.gallery) {
// 	allLenses.push(image.metadata.lens);
// }
// // return only the unique lenses
// const uniqueLenses = [...new Set(allLenses)];
---

<Layout title={shoot.data.title} description={shoot.data.excerpt} navPadding={false}>
	<div class="h-[90vh] min-h-[500px] lg:h-[70vh] relative flex items-end">
		<Figure src={shoot.data.images.thumbnail.url} figureClass="sm:absolute w-full h-full" class="w-full h-full object-cover" sizes="100vw" gallery={false} showTitle={false} lazy={false} />
		<div class="bg-gradient-to-b from-transparent via-transparent lg:via-black/60 to-black absolute w-full h-full"></div>
	</div>

	<div class="-mt-[11.5em] sm:-mt-[16em] lg:-mt-[24em] relative z-10 space-y-6 md:space-y-8 lg:space-y-16">
		<Container size="large" classes="@container">
			<h1
				class:list={[
					"text-balance mx-auto !text-slate-50 text-4xl @xs:text-4xl @sm:text-5xl sm:text-6xl md:text-7xl lg:text-8xl lg:ml-0 text-center lg:text-left line-clamp-2 max-w-sm sm:max-w-3xl",
					shoot.data.title.length <= 30 ? "lg:max-w-4xl" : "lg:max-w-5xl",
				]}
			>
				{shoot.data.title}
			</h1>
		</Container>

		<Container size="xlarge">
			<div class="grid md:grid-cols-3 gap-4 md:gap-6 lg:gap-12 items-start">
				<div class="md:col-span-2 space-y-16">
					<div class:list={["@container grid md:grid-cols-2 gap-4 md:gap-6 lg:gap-8", shoot.data.images.gallery.length < 7 ? "lg:grid-cols-2" : "lg:grid-cols-3"]}>
						{
							shoot.data.images.gallery.map((g) => (
								<Figure
									src={g.url}
									figureClass={["w-full h-full shadow-2xl", shoot.data.images.gallery.length > 7 ? "md:h-[14em] lg:@4xl:h-[20em]" : "lg:h-[16em]"]}
									class="w-full h-full object-cover"
									sizes="(min-width: 768px) 300px, (min-width: 1024px) 350px, 100vw"
									showTitle={false}
								/>
							))
						}
					</div>
				</div>

				<div class:list={["md:col-span-1 space-y-12 @container"]}>
					<div class="bg-gradient-to-br from-emerald-50 to-emerald-100 shadow-2xl rounded space-y-8 px-6 py-8">
						{
							shoot.data.excerpt && (
								<div class="space-y-4">
									<p class="font-semibold text-slate-900 text-sm uppercase tracking-wider">Summary</p>
									<div class:list={["sm:text-base md:text-base @xs:lg:text-lg @sm:lg:text-2xl font-normal !leading-normal tracking-normal text-slate-800"]} set:html={shoot.data.excerpt} />
								</div>
							)
						}

						<div class="">
							<div class="space-y-4">
								<p class="font-semibold text-sm uppercase tracking-wider">Meta</p>
								<div class="space-y-1 text-sm sm:text-base sm:leading-7">
									Photoshoot took place on {formatDate(shoot.data.date)} in {shoot.data.shoot.location}.
									{
										shoot.data.auction.url && (
											<span>
												Eventually, this {shoot.data.shoot.brand} was listed on
												<a href={shoot.data.auction.url} target="_blank" class="underline font-medium">
													{shoot.data.auction.site.value}
												</a>
												and was {shoot.data.auction.sold ? "sold for" : "bid to"} ${Intl.NumberFormat().format(shoot.data.auction.price)}.
											</span>
										)
									}
								</div>
							</div>
						</div>
					</div>

					<div class="space-y-8 px-6">
						<!-- {
							shoot.data.shoot.content && (
								<hr class="bg-slate-300/80 h-px border-0" />

								<div class="prose @xs:lg:prose-base @sm:lg:prose-lg">
									<Markdown content={shoot.data.shoot.content} />
								</div>
							)
						} -->

						{
							shoot.data.videos.length > 0 && (
								<div class="space-y-4">
									<p class="font-semibold text-slate-900 text-sm uppercase tracking-wider">Videos</p>

									{shoot.data.videos.map((r) => (
										<video width="1280" height="1024" class="w-full h-full shadow-xl rounded" controls poster="">
											<source src={r.video.imgix_url} type="video/mp4" />
											Your browser does not support the video tag.
										</video>
									))}
								</div>
							)
						}

						{
							shoot.data.related && (
								<div class="space-y-4">
									<p class="font-semibold text-slate-900 text-sm uppercase tracking-wider">Related Shoots</p>

									<div>
										{shoot.data.related.map((r) => (
											<div>{r}</div>
										))}
									</div>
								</div>
							)
						}
					</div>
				</div>
			</div>
		</Container>
	</div>
</Layout>
